name: Deploy Backend to EC2

on:
  push:
    branches: [dev]
    paths: ['backend/**']
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "üê≥ Building Docker image..."
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        echo "üì§ Pushing to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "‚úÖ Image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Deploy to EC2
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        set -e
        
        echo "üöÄ Deploying to EC2..."
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters "commands=[
            'set -e',
            'echo Starting Docker deployment...',
            'aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin $ECR_REGISTRY',
            'echo Pulling latest image...',
            'docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest',
            'echo Stopping existing container...',
            'docker stop bloodline-api || true',
            'docker rm bloodline-api || true',
            'echo Starting new container...',
            'docker run -d --name bloodline-api --restart unless-stopped -p 5000:5000 -e ASPNETCORE_ENVIRONMENT=Production $ECR_REGISTRY/$ECR_REPOSITORY:latest',
            'sleep 5',
            'docker ps | grep bloodline-api',
            'echo Deployment completed successfully!'
          ]" \
          --region ap-southeast-1 \
          --query 'Command.CommandId' \
          --output text)
        
        echo "üìã Command ID: $COMMAND_ID"
        echo "‚è≥ Waiting for deployment..."
        
        # Wait for command completion
        for i in {1..20}; do
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --region ap-southeast-1 \
            --query 'Status' \
            --output text 2>/dev/null || echo "InProgress")
          
          echo "Status: $STATUS (attempt $i/20)"
          
          if [ "$STATUS" = "Success" ]; then
            echo "‚úÖ Deployment successful!"
            aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --region ap-southeast-1 \
              --query 'StandardOutputContent' \
              --output text
            break
          elif [ "$STATUS" = "Failed" ]; then
            echo "‚ùå Deployment failed!"
            aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --region ap-southeast-1 \
              --query 'StandardOutputContent' \
              --output text
            exit 1
          fi
          
          sleep 10
        done