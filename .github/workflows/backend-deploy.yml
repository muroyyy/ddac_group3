name: Deploy Backend to EC2

on:
  push:
    branches: [dev]
    paths: ['backend/**']
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
      working-directory: backend
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
      working-directory: backend
    
    - name: Publish
      run: dotnet publish --no-build --configuration Release --output ./publish
      working-directory: backend
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
    
    - name: Deploy to EC2
      run: |
        set -e  # Exit on any error
        
        echo "üì¶ Creating deployment package..."
        cd backend/publish
        tar -czf ../deployment.tar.gz .
        ls -la ../deployment.tar.gz
        
        echo "‚òÅÔ∏è Uploading to S3..."
        aws s3 cp ../deployment.tar.gz s3://${{ secrets.DEPLOYMENT_BUCKET }}/backend/ --no-progress
        echo "‚úÖ Upload completed"
        
        echo "üöÄ Executing deployment on EC2..."
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "set -e",
            "echo Starting deployment...",
            "sudo systemctl stop bloodline-api || true",
            "cd /opt/bloodline",
            "echo Downloading from S3...",
            "aws --version || (echo AWS CLI not found && exit 1)",
            "aws s3 cp s3://${{ secrets.DEPLOYMENT_BUCKET }}/backend/deployment.tar.gz . || (echo S3 download failed && exit 1)",
            "ls -la deployment.tar.gz || (echo File not found && exit 1)",
            "echo Extracting files...",
            "sudo rm -rf app/*",
            "sudo tar -xzf deployment.tar.gz -C app/ || (echo Extraction failed && exit 1)",
            "ls -la app/ || (echo App directory empty && exit 1)",
            "sudo chown -R bloodline:bloodline app/",
            "echo Starting service...",
            "sudo systemctl start bloodline-api || (echo Service start failed && exit 1)",
            "sudo systemctl enable bloodline-api",
            "sleep 5",
            "sudo systemctl status bloodline-api --no-pager",
            "echo Deployment completed successfully!"
          ]' \
          --region ap-southeast-1 \
          --query 'Command.CommandId' \
          --output text)
        
        echo "üìã Command ID: $COMMAND_ID"
        echo "‚è≥ Waiting for command execution..."
        
        # Wait for command to complete
        for i in {1..30}; do
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --region ap-southeast-1 \
            --query 'Status' \
            --output text 2>/dev/null || echo "InProgress")
          
          echo "Status: $STATUS (attempt $i/30)"
          
          if [ "$STATUS" = "Success" ]; then
            echo "‚úÖ Deployment completed successfully!"
            aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --region ap-southeast-1 \
              --query 'StandardOutputContent' \
              --output text
            break
          elif [ "$STATUS" = "Failed" ]; then
            echo "‚ùå Deployment failed!"
            echo "STDOUT:"
            aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --region ap-southeast-1 \
              --query 'StandardOutputContent' \
              --output text
            echo "STDERR:"
            aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --region ap-southeast-1 \
              --query 'StandardErrorContent' \
              --output text
            exit 1
          fi
          
          sleep 10
        done
        
        if [ "$STATUS" != "Success" ]; then
          echo "‚ùå Deployment timed out or failed!"
          exit 1
        fi